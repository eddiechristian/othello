use std::fmt;

#[derive(Clone, Debug)]
enum BoardSquareState {
	EMPTY,
	BLACK,
	WHITE
}


type ROW = Vec<BoardSquareState>;

#[derive(Clone)]
struct OthelloBoard{
	rows: Vec<ROW>
}
impl fmt::Debug for OthelloBoard {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    	
        write!(f, "OthelloBoard\n{:?}\n{:?}", 
        	self.rows[0],
        	self.rows[1],
        	self.rows[2],
        	self.rows[3]
        )
    	
    }
}

fn main() {
	
	let n = 4;
	let size :usize = 2 * n;
	
	let emptyRow = vec![BoardSquareState::EMPTY,BoardSquareState::EMPTY,
					BoardSquareState::EMPTY,BoardSquareState::EMPTY,
					BoardSquareState::EMPTY,BoardSquareState::EMPTY,
					BoardSquareState::EMPTY,BoardSquareState::EMPTY];
	let blackWhite = vec![BoardSquareState::EMPTY,BoardSquareState::EMPTY,
					BoardSquareState::EMPTY,BoardSquareState::BLACK,
					BoardSquareState::WHITE,BoardSquareState::EMPTY,
					BoardSquareState::EMPTY,BoardSquareState::EMPTY];
	let mut board = OthelloBoard{ rows: Vec::new() };
	board.rows.push(emptyRow.clone());
    board.rows.push(emptyRow.clone());
    board.rows.push(emptyRow.clone());
    board.rows.push(blackWhite);
    println!("board = {:?}",board);
   // board.rows[0][0]=BoardSquareState::WHITE;
    println!("board = {:?}",board);
}
