use std::fmt;

#[derive(Clone, Debug)]
enum BoardSquareState {
	EMPTY,
	BLACK,
	WHITE
}


type ROW = Vec<BoardSquareState>;

#[derive(Clone)]
struct OthelloBoard{
	rows: Vec<ROW>
}

impl OthelloBoard {
    pub fn new(size: i32) -> OthelloBoard {
        for 0...size{
        	
        }
    }
}

impl fmt::Debug for OthelloBoard {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    	
        write!(f, "OthelloBoard\n{:?}\n{:?}\n{:?}\n{:?}\n{:?}\n{:?}\n{:?}\n{:?}", 
        	self.rows[0],self.rows[1],self.rows[2],self.rows[3],
        	self.rows[4],self.rows[5],self.rows[6],self.rows[7]
        )
    	
    }
}

fn main() {
	
	let n = 4;
	let size :usize = 2 * n;
	
	let emptyRow = vec![BoardSquareState::EMPTY,BoardSquareState::EMPTY,
					BoardSquareState::EMPTY,BoardSquareState::EMPTY,
					BoardSquareState::EMPTY,BoardSquareState::EMPTY,
					BoardSquareState::EMPTY,BoardSquareState::EMPTY];
	let blackWhiteRow = vec![BoardSquareState::EMPTY,BoardSquareState::EMPTY,
					BoardSquareState::EMPTY,BoardSquareState::BLACK,
					BoardSquareState::WHITE,BoardSquareState::EMPTY,
					BoardSquareState::EMPTY,BoardSquareState::EMPTY];
					
	let WhiteBlackRow = vec![BoardSquareState::EMPTY,BoardSquareState::EMPTY,
					BoardSquareState::EMPTY,BoardSquareState::WHITE,
					BoardSquareState::BLACK,BoardSquareState::EMPTY,
					BoardSquareState::EMPTY,BoardSquareState::EMPTY];
	let mut board = OthelloBoard{ rows: Vec::new() };
	board.rows.push(emptyRow.clone());
    board.rows.push(emptyRow.clone());
    board.rows.push(emptyRow.clone());
    board.rows.push(blackWhiteRow);
    board.rows.push(WhiteBlackRow);
    board.rows.push(emptyRow.clone());
    board.rows.push(emptyRow.clone());
    board.rows.push(emptyRow.clone());
    println!("board = {:?}",board);
   // board.rows[0][0]=BoardSquareState::WHITE;
    println!("board = {:?}",board);
}
